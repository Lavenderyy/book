

遇到的问题：

我最初遇到的第一个问题是关于我们的框架的。一开始我们决定用spring mvc框架的时候，我以为我在公司实习的时候用的是spring，应该比较容易上手。可是当我真正去使用的时候，才发现这两者还是有很大不同的。由于不熟悉spring mvc框架，我遇到了很多小问题。比如找不到jsp页面，数据库连接不上，前端调用不到后台的方法等等。我的解决方案就是上网找一些教程，同时有什么不懂得积极向队友请教。关于找不到jsp页面，我了解到，这个框架是通过一个方法对应一个url，所以每个页面创建之后要在controller里写一个方法，把url map好，就不会出现404 error了。对于数据库连接不上，我上网找了好久，也请教了队友，都找不出什么问题。后来才发现我的代码和配置都没有错误，只是jar包的版本不对。所以在我从网上找了另一个版本的jar包放进去后，问题就解决了。
而对于前端调用不到后台的方法，主要是由于form表单提交的时候会直接跳到form表单的action对应的方法，中间的button跳不进其他方法。在队友的建议下，我尝试把button变成a标签，然后把方法放在链接里面。问题成功解决了。慢慢地，一边开发一边熟悉这个框架。一段时间之后，我已经基本不会因为不熟悉框架出现问题了。

第二个问题是服务端和客户端的通信问题。因为我们是分开两个人各自开发。我开发点餐系统的客户端，队友开发点餐系统的服务端。所以等我们各自完成系统的实现后，才发现我们没考虑到两者之间的通信问题。所以基于我之前的经验，我建议采用webservice来实现两者的通信。而我队友则觉得，我们是共享数据库的，所以我们可以通过定时到数据库查询刷新来拿到我们各自想要的数据。而最终基于我们的时间有限，而且我们需要获取的对方的信息也相对较少，所以我们决定采用定时到数据库查询的方法来拿到我们各自需要的数据。接下来的问题就是实现这个方法了。最后我们成功完成两者的通信。

还有一个问题是我们是分开开发，但是数据库是共享的。所以一开始表的属性的类型我们两个没有提前商量好。所以等到整合代码的时候，我们才发现，因为同一个属性我们设置成不同的类型，所以获取的方法以及应用都有比较大的不同。而作为一个完整的项目，我们必须先统一标准，所以，整合代码花费了我们很大的功夫。我们有较大一部分代码要修改。同时我们也在这个问题上吸取了教训。之后我们统一了数据库属性的标准，而且每一次不管哪一方要改动数据库都要提前商量好。所以后面的整合就非常顺利，不会出现之前的问题。

最后一个问题是由于我们整合了代码之后还进行了修改，但是在向指导老师做第一次展示前我们并没有排练过一遍。所以在向指导老师做系统的第一次演示的时候，我们便错漏百出。出现了客户端和服务端不能同时跑起来；数据库出现问题，进不去我们的系统等问题。正所谓人非圣贤，孰能无错。我们知错就改，积极吸取教训。之后的每一次整合代码之后，我们都会把系统完完整整，从头到尾跑一遍，从而确保不会在做展示的时候手忙脚乱，错漏百出。所以我们后面就没有再出现过类似的问题了。

 

愿景和展望

由于时间有限，而且资源也有限，我们已经尽自己最大的努力设计并实现出我们理想的移动点餐系统了。功能不一定十全十美，但麻雀虽小，五脏俱全。而且，假如有更多的时间，更多的资源，我们的系统将能更完善，将能实现更多的特色功能。但是，我相信，移动点餐系统对比传统点餐系统，它拥有如此多的优势。就算不是完全取代传统的点餐方式，但是随着互联网越来越渗透到人们生活的方方面面，移动点餐在现在以及以后一定是大势所趋，前景一片大好。

 

对于用户权限的设置，我们分为登录前和登录后两种情况。

登录前，用户拥有的权限是：浏览首页，菜单，关于我们，联系我们，菜品展示，注册账号以及进行特定种类的菜单搜索等功能。但是当用户进行上述功能之外的操作时，比如查看历史订单等，系统便会自动弹出一个提示框，提醒用户这个操作要登录后才可以进行。

登录后，用户除了拥有上述的登录前的权限，还有以下权限：请空购物车，将喜欢的菜式加入购物车，在购物车里删除不要的菜式，选中喜欢的菜式下单，以及查看历史订单等功能。

对于用户权限的设置是为了更好地维护系统，为用户提供更高质量的服务，也让用户的操作更方便。
